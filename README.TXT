# Garbage Grab

Built by Ghxst 

## Introduction

Welcome to **Garbage Grab**, a fast-paced 3D multiplayer mini-game for desktop and mobile built to showcase the technical capabilities of the **Gorbagana Blockchain**, a Solana-based experimental testnet designed for gaming and community-driven experiments. Developed under a tight deadline for a friendly competition, this prototype demonstrates on-chain multiplayer mechanics with significant potential for future enhancements. This README provides everything you need to set up, run, and understand the game, including its blockchain integration with Program Derived Addresses (PDAs) and plans for improvement.

---

## Background Story

In a neon-drenched, dystopian future, humanity’s relentless consumption has overwhelmed Earth, leading to the creation of **Garbage World**—a massive asteroid repurposed as a cosmic landfill for discarded tech and refuse. Amid the chaos, rare and valuable technologies lie buried in the heaps, waiting to be reclaimed.

You are a **Garbage Grabber**, a fearless pilot commanding a cutting-edge mech suit, diving into this hazardous terrain to salvage high-value items before they’re lost forever. But you’re not alone. Rival Grabbers and the fearsome **Glub Evolved**—a bio-mechanical creature engineered to consume garbage—patrol the dumps, fiercely guarding their territory. Only the fastest, smartest, and most daring will claim the top spot in this high-stakes scavenger hunt.

Gear up, navigate the neon fog, and grab your fortune!

---

## Game Overview

**Garbage Grab** is a competitive 3D game set in a cyberpunk-inspired arena shrouded in fog, filled with junk piles and spike traps. Players pilot customizable mechs to collect valuable loot—**Gold Coins** (10 points), **Blue USB Sticks** (25 points), and **Silver Laptops** (50 points)—while competing against two AI opponents (TrashBot_1 and TrashBot_2) and evading the Glub Evolved monster. The goal is to achieve the highest score within a 5-minute timer, surviving hazards and outsmarting rivals.

### Key Features

- **Player Control**:
  - **Desktop**: Use `W`, `A`, `S`, `D` for tank-style movement (forward, backward, rotate) and `Space` to jump.
  - **Mobile**: A virtual joystick enables fluid 360-degree movement, with the mech auto-orienting to the direction of movement.

- **Characters**:
  - **Player’s Mech**: A custom-skinned **Mech-D5Ww2Jdo42** with running and idle animations, equipped with physics colliders.
  - **AI Opponents**: Two TrashBots that actively seek collectibles, creating dynamic competition.
  - **Glub Evolved**: A roaming hazard that chases players within its detection radius, dealing 20 HP damage on collision with a screen shake effect.

- **Arena**:
  - A grid-based floor with moody fog for atmosphere, junk piles as static obstacles, and spike traps dealing 25 HP damage (with cooldown).

- **Objective**:
  - Collect the most points by running into loot, survive the 5-minute round or until health depletes, and aim for the top of the leaderboard.

- **User Interface**:
  - **HUD**: Displays health (top-left), timer (top-center), score (top-right), and leaderboard (bottom-right, showing real-time player and AI scores).
  - **Screens**: Includes a loading screen with a glitchy "GARBAGE GRAB" title, a start screen with a "CLICK TO START" button, and a game over screen showing the final score and a "RESTART" button.
  - **Audio**: A looping cyberpunk track, sound effects for collecting items, taking damage, and game events, with a mute/unmute toggle.
  - **Visual Effects**: Bloom for neon glow, Vignette for focus, collection particles, and screen shake on damage.

---

## Blockchain Integration

**Garbage Grab** leverages the **Gorbagana Blockchain**, a Solana-based testnet with zero-MEV execution, instant finality, and Web2-like speed, to manage player scores securely and transparently using **Program Derived Addresses (PDAs)**. This integration showcases the chain’s ability to handle frequent, low-latency transactions for real-time gaming.

### How It Works

- **Program Derived Addresses (PDAs)**:
  - PDAs are unique accounts generated by the game’s Solana program, derived from the program ID and seeds (e.g., the player’s public key and the string "score").
  - They are deterministic, secure (no private keys), and controlled solely by the program, ensuring tamper-proof score management.
  - When a player joins, their PDA is derived client-side using `PublicKey.findProgramAddress`. If new, the program initializes the account with a score of 0.

- **Score Updates**:
  - Collecting an item (e.g., 10 points for a coin) triggers a transaction to the deployed score program, which updates the player’s PDA with the new score.
  - The program, written in Rust (`lib.rs`), validates transactions and ensures scores stay within limits (e.g., max 1,000,000 points).

- **Leaderboard**:
  - The leaderboard fetches scores directly from PDA accounts on the Gorbagana Blockchain, updating in real-time to reflect rankings, ensuring transparency and fairness.

- **Wallet Connection**:
  - A "Connect Wallet" button in the UI (`ui.js`, rendered in `#walletPanel`) simulates integration with the Backpack wallet, updating the player’s name to "Ghxst.gor" on the leaderboard.
  - Full wallet integration is planned for future releases to support $gGOR test token rewards.

This setup demonstrates the Gorbagana Chain’s speed and efficiency, making it ideal for competitive, on-chain gaming.

---

NEXT STEPS IN DEVELOPMENT

Garbage Grab is a basic prototype built to showcase the Gorbagana Blockchain’s capabilities for fast, decentralized gaming. Developed under time constraints, it lays a strong foundation for future enhancements:Improved Visuals and Maps:Enhance 3D renderings for mechs, collectibles, and the Glub Evolved.
Create larger, AI-generated, procedurally generated maps for dynamic, ever-evolving gameplay.

Live On-Chain Leaderboard:Implement a persistent, global leaderboard hosted on a separate page, tracking top players with $gGOR token rewards.

Easter Eggs:Add hidden treasure chests that, when found, send $gGOR tokens to the player’s wallet, increasing engagement.

Multiplayer Enhancements: Develop real-time multiplayer, allowing direct competition between players on the Gorbagana testnet.

NFT Integration:Introduce NFTs for mech suits and upgrades, enabling a marketplace for buying, selling, and trading assets, adding strategy and economy.

Additional developments :New Game Modes: Team-based challenges or survival modes.
Social Features: Share scores or invite friends via social media for competition points in social promotion.
Expanded Collectibles: Add power-ups or rare items to diversify gameplay.


## Technology Stack

The game is built with a modern, buildless JavaScript setup:
- **Rendering**: Three.js, React Three Fiber, and Drei for declarative 3D scene building.
- **Physics**: React Three Rapier for collision detection and movement.
- **State Management**: Zustand for managing score, health, timer, and game status.
- **Audio**: Howler.js for cross-platform sound support.
- **UI**: React for HUD, menus, and screens.
- **Module Loading**: ESM modules with an importmap in `index.html`, loaded from esm.sh, eliminating build steps.
- **Blockchain**: Solana-based Gorbagana Chain, with the score program deployed from the `garbagegrab-program` folder.

---

## Setup and Installation

To run **Garbage Grab** locally, follow these steps:

### Prerequisites

- **Node.js** (v14+): [Download](https://nodejs.org/)
- **npm** (v6+): Included with Node.js
- **Git**: [Download](https://git-scm.com/)
- **Solana CLI**: Optional for blockchain interaction (pre-installed in your environment)
- **Backpack wallet: Download the Backpack Wallet extension which is a prerequisite from :https://chromewebstore.google.com/detail/backpack/aflkmfhebedbjioipglgcbcmnbpgliof?pli=1
 -Go to settings, select Gorbagana 
- Select RPC connection 
- Update your Backpack wallet with custom RPC - http://rpc.gorbagana.wtf
- Get some tesnet tokens from: https://faucet.gorbagana.wtf/ 


### Installation Steps

1. **Clone the Repository**:
   ```bash
   git clone 
   cd garbagegrab
   

Install Dependencies:In the garbagegrab folder (client-side):bash

npm install

In the garbagegrab-program folder (server-side):bash

cd ../garbagegrab-program
npm install

Run the Server:In the garbagegrab-program folder:bash

node server.js

This starts the server that connects to the deployed score program on the Gorbagana testnet.

Run the Client:In the garbagegrab folder:bash

npm start

This uses Parcel to serve the game locally.

Access the Game:Open your browser and navigate to http://localhost:1234 to play.

**Acknowledgments

Garbage Grab was built using the following technologies: Three.js, React Three Fiber, and Drei for 3D rendering and scene management.
React Three Rapier for physics and collision detection.
Zustand for state management.
Howler.js for audio.
React for UI components.
Solana and Gorbagana Blockchain for on-chain score management.

3D assets and gameplay libraries from Rosebud AI, with all assets (3D models, textures, audio) included in the repository (/assets folder).